/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


ListNode* reverseLL(ListNode* &head)
{
        ListNode* curr=head;
        ListNode* prev=NULL;
        
        while(curr!=NULL)
        {
            ListNode* temp=curr->next;
            curr->next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
 }

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        ListNode* rev= reverseLL(head);
        ListNode* curr=rev;
        ListNode* prev =NULL;
        int c=1;
        while(curr!=NULL && c<n)
        {
             c+=1;
             prev=curr;
            curr=curr->next;
          
        }
         cout<<"curr"<<curr->val<<" "<<prev->val<<endl;
        if(curr==rev)
        {
            // cout<<"in"<<endl;
            rev=rev->next;
            
        }
        else prev->next=curr->next;
        
        ListNode* rev2= reverseLL(rev);
        return rev2;
    }
};